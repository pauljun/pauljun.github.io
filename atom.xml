<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PaulJun</title>
  
  <subtitle>个人主页</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pauljun.com/"/>
  <updated>2018-11-22T08:33:57.902Z</updated>
  <id>http://pauljun.com/</id>
  
  <author>
    <name>PaulJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react 学习资料整理</title>
    <link href="http://pauljun.com/2018/11/21/react/"/>
    <id>http://pauljun.com/2018/11/21/react/</id>
    <published>2018-11-21T06:26:49.424Z</published>
    <updated>2018-11-22T08:33:57.902Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="react-文档"><a href="#react-文档" class="headerlink" title="react 文档"></a>react 文档</h1><p><a href="http://react-china.org/" target="_blank" rel="noopener">中国社区</a><br><a href="https://react.docschina.org/" target="_blank" rel="noopener">中文文档</a><br><a href="https://reactjs.org/" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;react-文档&quot;&gt;&lt;a href=&quot;#react-文档&quot; class=&quot;headerlink&quot; title=&quot;react 文档&quot;&gt;&lt;/a&gt;react 文档&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://react-china.
      
    
    </summary>
    
      <category term="资料" scheme="http://pauljun.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
      <category term="javascript" scheme="http://pauljun.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Debug</title>
    <link href="http://pauljun.com/2018/11/20/mobiledebug/"/>
    <id>http://pauljun.com/2018/11/20/mobiledebug/</id>
    <published>2018-11-20T06:09:20.000Z</published>
    <updated>2018-11-21T06:10:52.908Z</updated>
    
    <content type="html"><![CDATA[<p>移动端调试</p><ul><li>网络代理</li><li>网页调试</li><li>请求挟持</li><li>HTTPS</li><li>跨平台</li><li>Hosts管理</li><li>WebSocket</li><li>数据抓捕</li></ul><p><a href="https://www.mobiledebug.com/" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;移动端调试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络代理&lt;/li&gt;
&lt;li&gt;网页调试&lt;/li&gt;
&lt;li&gt;请求挟持&lt;/li&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;Hosts管理&lt;/li&gt;
&lt;li&gt;WebSocket&lt;/li&gt;
&lt;li&gt;数据抓捕&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="工具" scheme="http://pauljun.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-cli项目搭建</title>
    <link href="http://pauljun.com/2018/11/12/vue/"/>
    <id>http://pauljun.com/2018/11/12/vue/</id>
    <published>2018-11-12T08:05:46.629Z</published>
    <updated>2018-11-21T02:56:48.701Z</updated>
    
    <content type="html"><![CDATA[<p>vue中文官网 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a><br><a id="more"></a></p><h4 id="谷歌调试工具-dev-tools"><a href="#谷歌调试工具-dev-tools" class="headerlink" title="谷歌调试工具:dev-tools"></a>谷歌调试工具:dev-tools</h4><p>1.github下载地址：<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-devtools" target="_blank" rel="noopener">https://github.com/vuejs/vue-devtools</a><br>2.下载好后进入vue-devtools-master工程  执行npm install —–&gt;npm run build.<br>3.然后打开shells&gt;chrome&gt;src&gt;manifest.json 把里面的”persistent”: false改为true<br>4.打开谷歌浏览器设置—&gt;扩展程序–》勾选开发者模式—》添加工程中的shells–&gt;chrome的内容，至此恭喜已经安装成功！！！<br>5.打开自己的vue项目中，如果是有vue-cli构建的项目，执行npm run dev,打开<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 服务器调试地址；至此完成devtools的安装；</p><h4 id="利用vue-cli来初始化我们的项目"><a href="#利用vue-cli来初始化我们的项目" class="headerlink" title="利用vue-cli来初始化我们的项目"></a>利用vue-cli来初始化我们的项目</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局安装webpack</span></span><br><span class="line">npm install -<span class="keyword">g</span> webpack</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装vue-cli</span></span><br><span class="line">npm install -<span class="keyword">g</span> vue-<span class="keyword">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用vue-cli初始化项目,初始化项目时根据需要选择需要用到的框架(router,vuex),是否需要Eslint验证，选否</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入到目录</span></span><br><span class="line"><span class="keyword">cd</span> my-project</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line">npm <span class="keyword">run</span> dev</span><br></pre></td></tr></table></figure><h4 id="vue-cli-2-0-webpack-配置分析"><a href="#vue-cli-2-0-webpack-配置分析" class="headerlink" title="vue-cli#2.0 webpack 配置分析"></a>vue-cli#2.0 webpack 配置分析</h4><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">-- build                            // 项目构建(webpack)相关代码</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- build.js                     // 生产环境构建代码</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- check-version.js             // 检查node、npm等版本</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev-client.js                // 热重载相关</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev-server.js                // 构建本地服务器</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- utils.js                     // 构建工具相关</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.base.conf.js         // webpack基础配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.dev.conf.js          // webpack开发环境配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- webpack.prod.conf.js         // webpack生产环境配置</span></span><br><span class="line">|<span class="string">-- config                           // 项目开发环境配置</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- dev.env.js                   // 开发环境变量</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- index.js                     // 项目一些配置变量</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- prod.env.js                  // 生产环境变量</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- test.env.js                  // 测试环境变量</span></span><br><span class="line">|<span class="string">-- src                              // 源码目录</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- components                     // vue公共组件</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- store                          // vuex的状态管理</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- App.vue                        // 页面入口文件</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- main.js                        // 程序入口文件，加载各种公共组件</span></span><br><span class="line">|<span class="string">-- static                           // 静态文件，比如一些图片，json数据等</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- data                           // 群聊分析得到的数据用于数据可视化</span></span><br><span class="line">|<span class="string">-- .babelrc                         // ES6语法编译配置</span></span><br><span class="line">|<span class="string">-- .editorconfig                    // 定义代码格式</span></span><br><span class="line">|<span class="string">-- .gitignore                       // git上传需要忽略的文件格式</span></span><br><span class="line">|<span class="string">-- README.md                        // 项目说明</span></span><br><span class="line">|<span class="string">-- favicon.ico </span></span><br><span class="line">|<span class="string">-- index.html                       // 入口页面</span></span><br><span class="line">|<span class="string">-- package.json                     // 项目基本信息</span></span><br></pre></td></tr></table></figure><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>日历插件vue-event-calender<br>github中文文档:<a href="https://github.com/GeoffZhu/vue-event-calendar/blob/master/README.zh.md" target="_blank" rel="noopener">https://github.com/GeoffZhu/vue-event-calendar/blob/master/README.zh.md</a><br>演示地址:<a href="http://geoffzhu.cn/vue-event-calendar/" target="_blank" rel="noopener">http://geoffzhu.cn/vue-event-calendar/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue中文官网 &lt;a href=&quot;https://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn.vuejs.org/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://pauljun.com/categories/javascript/"/>
    
    
      <category term="vue" scheme="http://pauljun.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis 自动部署博客到 Github Pages</title>
    <link href="http://pauljun.com/2017/08/12/travis/"/>
    <id>http://pauljun.com/2017/08/12/travis/</id>
    <published>2017-08-12T06:12:50.000Z</published>
    <updated>2018-11-22T08:31:46.934Z</updated>
    
    <content type="html"><![CDATA[<p>由于博客的源码和生成站点位于不同的代码仓库中（源码位于 <a href="https://github.com/uchuhimo/uchuhimo.me" target="_blank" rel="noopener">uchuhimo/uchuhimo.me</a>，生成的静态站点位于 <a href="https://github.com/uchuhimo/uchuhimo.github.io" target="_blank" rel="noopener">uchuhimo/uchuhimo.github.io</a>，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。</p><p>接下来，我会先介绍自动部署的原理，再讲解搭建的过程。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Travis 为 GitHub 上的开源项目提供免费的持续集成（CI）服务，只要你向指定仓库提交了代码，Travis 就会根据配置自动运行 CI 任务。利用这个特性，我们可以做到在一次提交过程中触发如下流程：</p><ul><li>内容编辑完成，向博客的源码仓库 push 代码</li><li>GitHub 通过 hook 告诉 Travis 有新的提交，Travis 启动新的 CI 任务</li><li>在 CI 任务中，代码被 clone 到 Travis 的构建服务器上</li><li>构建服务器准备好 Node.js 的运行环境，运行 Hexo 的生成命令，并将生成的静态站点 push 到 GitHub Pages 的仓库中，博客部署完成</li></ul><p>这个过程中的难点在于如何给予 Travis push 你的 GitHub Pages 仓库的权限。有两种方法可以获得 push 权限：</p><ul><li>SSH 私钥：只要在 GitHub 上配了相应公钥，就可以通过 SSH 进行 push</li><li>Personal access token：只要在 GitHub 上生成了 personal access token，就可以通过 HTTPS 进行 push</li></ul><p>但是，无论是使用上述的哪种方法，SSH 私钥 / personal access token 都不能出现在 Travis 的配置文件里，因为 Travis 的配置文件（即 <code>.travis.yml</code>）会出现在博客的源码仓库里，这意味着任何能访问你提交历史的路人（对于 GitHub 的公开项目来说，意味着<strong>任何人</strong>）都能获取到它们并用来向你的仓库进行任意提交——这是灾难性的（顺带一提，GitHub 如果发现你的代码仓库中含有 personal access token，会自动删除相应token，因此向仓库提交 personal access token 的行为并不会带来风险，只是没有意义而已，因为 token 会直接失效）。因此，我们需要使用 Travis 客户端对 SSH 私钥 / personal access token 进行加密，然后在 CI 任务中解密并使用它们。</p><p>原理解释先到这里，下面我们直接动手做吧~</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>注册 Travis 并将 Github Pages 的源码项目加入 Travis</li><li>准备一个 Github 的 personal access token</li><li><p>安装 Travis 客户端（加入了惯例的“换国内源”环节，不用谢我^_^）：</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install rvm</span></span><br><span class="line">gpg --keyserver hkp://keys.gnupg.net:80 --recv-keys D39DC0E3</span><br><span class="line">\curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line"><span class="built_in">source</span> /home/uchuhimo/.rvm/scripts/rvm</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~/.rvm/user/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ruby</span></span><br><span class="line">rvm install 2.4.0</span><br><span class="line">rvm use 2.4.0 --default</span><br><span class="line"></span><br><span class="line"><span class="comment"># configure gem</span></span><br><span class="line">gem sources --add https://gems.ruby-china.org/ --remove http://rubygems.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># install travis</span></span><br><span class="line">gem install travis</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置-Travis"><a href="#配置-Travis" class="headerlink" title="配置 Travis"></a>配置 Travis</h2><ul><li>在博客的源码项目下新建 <code>.travis.yml</code>：<code>touch .travis.yml</code></li><li>加密上文生成的 personal access token：<code>travis encrypt GITHUB_TOKEN=&quot;&lt;personal-access-token&gt;&quot; --add</code></li><li><p>在 <code>.travis.yml</code> 中添加如下内容（记得替换变量）：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_deploy:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static site</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">pages</span> <span class="comment"># deploy to GitHub Pages</span></span><br><span class="line"><span class="attr">  skip_cleanup:</span> <span class="literal">true</span> <span class="comment"># don't clean generated site</span></span><br><span class="line"><span class="attr">  github_token:</span> <span class="string">$GITHUB_TOKEN</span> <span class="comment"># provide the encrypted token</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;username&gt;/&lt;github-pages-repo-name&gt;</span> <span class="comment"># optional, defaults to current repo</span></span><br><span class="line"><span class="attr">  local_dir:</span> <span class="string">public</span> <span class="comment"># optional, defaults to the current directory</span></span><br><span class="line"><span class="attr">  target_branch:</span> <span class="string">master</span> <span class="comment"># optional, defaults to "gh-pages"</span></span><br><span class="line"><span class="attr">  fqdn:</span> <span class="string">&lt;custom-domain-url&gt;</span> <span class="comment"># optional</span></span><br><span class="line"><span class="attr">  project_name:</span> <span class="string">&lt;project-name&gt;</span> <span class="comment"># optional, defaults to value of fqdn or repo</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">&lt;committer-email&gt;</span> <span class="comment"># optional, defaults to "deploy@travis-ci.org"</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">&lt;committer-name&gt;</span> <span class="comment"># optional, defaults to "Deployment Bot"</span></span><br></pre></td></tr></table></figure></li><li><p>提交更改即可触发 Travis 自动更新 Github Pages</p></li><li>到 <code>https://travis-ci.org/&lt;username&gt;/&lt;blog-source-repo-name&gt;</code> 页面查看构建是否成功</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在最终采用上述方案之前，我也看了网上现有的方案，感觉都多多少少有些繁琐，因此在自己折腾出来后才决定分享出来，供大家参考。</p><p>下面是我看到的几个比较靠谱的方案，以供对比：</p><ul><li><p>基于 SSH 的方案：<a href="https://zespia.tw/blog/2015/01/21/continuous-deployment-to-github-with-travis/" target="_blank" rel="noopener">用 Travis CI 自動部署網站到 GitHub</a></p><p>  这是 Hexo 作者 tommy351 自己部署 Hexo 的官方网站用的方案，感觉看完都有点不想折腾了，真的很繁琐。</p></li><li><p>基于 personal access token 的方案：<a href="http://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/" target="_blank" rel="noopener">使用 Travis CI 自动更新 GitHub Pages</a></p><p>  这是 NexT 作者 iissnan 部署 NexT 文档的方案，使用的和我一样是 personal access token，iissnan 自己撸了提交到 GitHub Pages 的命令，而我直接使用了 Travis 提供的部署插件，会更简单和易维护一些（其实真正的原因是我懒）。另一点不同是 iissnan 使用了 gulp 管理构建过程，而我直接使用 Hexo 的命令进行构建，因此构建的命令会有所不同。</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">GitHub Pages Deployment - Travis CI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于博客的源码和生成站点位于不同的代码仓库中（源码位于 &lt;a href=&quot;https://github.com/uchuhimo/uchuhimo.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uchuhimo/uchuhimo.me&lt;/a&gt;，生成的静态站点位于 &lt;a href=&quot;https://github.com/uchuhimo/uchuhimo.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uchuhimo/uchuhimo.github.io&lt;/a&gt;，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。&lt;/p&gt;
&lt;p&gt;接下来，我会先介绍自动部署的原理，再讲解搭建的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="部署" scheme="http://pauljun.com/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="Hexo" scheme="http://pauljun.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://pauljun.com/tags/GitHub/"/>
    
      <category term="Travis" scheme="http://pauljun.com/tags/Travis/"/>
    
  </entry>
  
</feed>
