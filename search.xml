<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[react 学习资料整理]]></title>
    <url>%2F2018%2F11%2F21%2Freact%2F</url>
    <content type="text"><![CDATA[react 文档中国社区中文文档官网]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mobile Debug]]></title>
    <url>%2F2018%2F11%2F20%2Fmobiledebug%2F</url>
    <content type="text"><![CDATA[移动端调试 网络代理 网页调试 请求挟持 HTTPS 跨平台 Hosts管理 WebSocket 数据抓捕 官网]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vue-cli项目搭建]]></title>
    <url>%2F2018%2F11%2F12%2Fvue%2F</url>
    <content type="text"><![CDATA[vue中文官网 https://cn.vuejs.org/ 谷歌调试工具:dev-tools1.github下载地址：https://github.com/vuejs/vue-devtools2.下载好后进入vue-devtools-master工程 执行npm install —–&gt;npm run build.3.然后打开shells&gt;chrome&gt;src&gt;manifest.json 把里面的”persistent”: false改为true4.打开谷歌浏览器设置—&gt;扩展程序–》勾选开发者模式—》添加工程中的shells–&gt;chrome的内容，至此恭喜已经安装成功！！！5.打开自己的vue项目中，如果是有vue-cli构建的项目，执行npm run dev,打开http://localhost:8080/ 服务器调试地址；至此完成devtools的安装； 利用vue-cli来初始化我们的项目//全局安装webpacknpm install -g webpack//安装vue-clinpm install -g vue-cli//使用vue-cli初始化项目,初始化项目时根据需要选择需要用到的框架(router,vuex),是否需要Eslint验证，选否vue init webpack my-project//进入到目录cd my-project//安装依赖npm install//运行npm run dev vue-cli#2.0 webpack 配置分析|-- build // 项目构建(webpack)相关代码| |-- build.js // 生产环境构建代码| |-- check-version.js // 检查node、npm等版本| |-- dev-client.js // 热重载相关| |-- dev-server.js // 构建本地服务器| |-- utils.js // 构建工具相关| |-- webpack.base.conf.js // webpack基础配置| |-- webpack.dev.conf.js // webpack开发环境配置| |-- webpack.prod.conf.js // webpack生产环境配置|-- config // 项目开发环境配置| |-- dev.env.js // 开发环境变量| |-- index.js // 项目一些配置变量| |-- prod.env.js // 生产环境变量| |-- test.env.js // 测试环境变量|-- src // 源码目录| |-- components // vue公共组件| |-- store // vuex的状态管理| |-- App.vue // 页面入口文件| |-- main.js // 程序入口文件，加载各种公共组件|-- static // 静态文件，比如一些图片，json数据等| |-- data // 群聊分析得到的数据用于数据可视化|-- .babelrc // ES6语法编译配置|-- .editorconfig // 定义代码格式|-- .gitignore // git上传需要忽略的文件格式|-- README.md // 项目说明|-- favicon.ico |-- index.html // 入口页面|-- package.json // 项目基本信息 插件日历插件vue-event-calendergithub中文文档:https://github.com/GeoffZhu/vue-event-calendar/blob/master/README.zh.md演示地址:http://geoffzhu.cn/vue-event-calendar/]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Travis 自动部署博客到 Github Pages]]></title>
    <url>%2F2017%2F08%2F12%2Ftravis%2F</url>
    <content type="text"><![CDATA[由于博客的源码和生成站点位于不同的代码仓库中（源码位于 uchuhimo/uchuhimo.me，生成的静态站点位于 uchuhimo/uchuhimo.github.io，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。 接下来，我会先介绍自动部署的原理，再讲解搭建的过程。 原理Travis 为 GitHub 上的开源项目提供免费的持续集成（CI）服务，只要你向指定仓库提交了代码，Travis 就会根据配置自动运行 CI 任务。利用这个特性，我们可以做到在一次提交过程中触发如下流程： 内容编辑完成，向博客的源码仓库 push 代码 GitHub 通过 hook 告诉 Travis 有新的提交，Travis 启动新的 CI 任务 在 CI 任务中，代码被 clone 到 Travis 的构建服务器上 构建服务器准备好 Node.js 的运行环境，运行 Hexo 的生成命令，并将生成的静态站点 push 到 GitHub Pages 的仓库中，博客部署完成 这个过程中的难点在于如何给予 Travis push 你的 GitHub Pages 仓库的权限。有两种方法可以获得 push 权限： SSH 私钥：只要在 GitHub 上配了相应公钥，就可以通过 SSH 进行 push Personal access token：只要在 GitHub 上生成了 personal access token，就可以通过 HTTPS 进行 push 但是，无论是使用上述的哪种方法，SSH 私钥 / personal access token 都不能出现在 Travis 的配置文件里，因为 Travis 的配置文件（即 .travis.yml）会出现在博客的源码仓库里，这意味着任何能访问你提交历史的路人（对于 GitHub 的公开项目来说，意味着任何人）都能获取到它们并用来向你的仓库进行任意提交——这是灾难性的（顺带一提，GitHub 如果发现你的代码仓库中含有 personal access token，会自动删除相应token，因此向仓库提交 personal access token 的行为并不会带来风险，只是没有意义而已，因为 token 会直接失效）。因此，我们需要使用 Travis 客户端对 SSH 私钥 / personal access token 进行加密，然后在 CI 任务中解密并使用它们。 原理解释先到这里，下面我们直接动手做吧~ 准备工作 注册 Travis 并将 Github Pages 的源码项目加入 Travis 准备一个 Github 的 personal access token 安装 Travis 客户端（加入了惯例的“换国内源”环节，不用谢我^_^）： # install rvmgpg --keyserver hkp://keys.gnupg.net:80 --recv-keys D39DC0E3\curl -sSL https://get.rvm.io | bash -s stablesource /home/uchuhimo/.rvm/scripts/rvmecho "ruby_url=https://cache.ruby-china.org/pub/ruby" &gt; ~/.rvm/user/db# install rubyrvm install 2.4.0rvm use 2.4.0 --default# configure gemgem sources --add https://gems.ruby-china.org/ --remove http://rubygems.org/# install travisgem install travis 配置 Travis 在博客的源码项目下新建 .travis.yml：touch .travis.yml 加密上文生成的 personal access token：travis encrypt GITHUB_TOKEN=&quot;&lt;personal-access-token&gt;&quot; --add 在 .travis.yml 中添加如下内容（记得替换变量）： language: node_jsnode_js: - "7"before_deploy: - hexo generate # generate static sitedeploy: provider: pages # deploy to GitHub Pages skip_cleanup: true # don't clean generated site github_token: $GITHUB_TOKEN # provide the encrypted token on: branch: master repo: &lt;username&gt;/&lt;github-pages-repo-name&gt; # optional, defaults to current repo local_dir: public # optional, defaults to the current directory target_branch: master # optional, defaults to "gh-pages" fqdn: &lt;custom-domain-url&gt; # optional project_name: &lt;project-name&gt; # optional, defaults to value of fqdn or repo email: &lt;committer-email&gt; # optional, defaults to "deploy@travis-ci.org" name: &lt;committer-name&gt; # optional, defaults to "Deployment Bot" 提交更改即可触发 Travis 自动更新 Github Pages 到 https://travis-ci.org/&lt;username&gt;/&lt;blog-source-repo-name&gt; 页面查看构建是否成功 后记在最终采用上述方案之前，我也看了网上现有的方案，感觉都多多少少有些繁琐，因此在自己折腾出来后才决定分享出来，供大家参考。 下面是我看到的几个比较靠谱的方案，以供对比： 基于 SSH 的方案：用 Travis CI 自動部署網站到 GitHub 这是 Hexo 作者 tommy351 自己部署 Hexo 的官方网站用的方案，感觉看完都有点不想折腾了，真的很繁琐。 基于 personal access token 的方案：使用 Travis CI 自动更新 GitHub Pages 这是 NexT 作者 iissnan 部署 NexT 文档的方案，使用的和我一样是 personal access token，iissnan 自己撸了提交到 GitHub Pages 的命令，而我直接使用了 Travis 提供的部署插件，会更简单和易维护一些（其实真正的原因是我懒）。另一点不同是 iissnan 使用了 gulp 管理构建过程，而我直接使用 Hexo 的命令进行构建，因此构建的命令会有所不同。 参考链接 GitHub Pages Deployment - Travis CI]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Travis</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用 Hexo 和 GitHub Pages 搭建这个博客]]></title>
    <url>%2F2017%2F04%2F11%2Fhexo%2F</url>
    <content type="text"><![CDATA[一个博客的搭建过程分为三步： 编写：包含内容的书写与格式的配置 构建：从编写的原始内容生成可发布的最终内容 发布：让待发布的内容对读者可见 依托于博客平台（如博客园、新浪博客等）发布内容的用户只需要关注编写部分，但要搭建一个独立的个人博客则以上三方面都需要关心。幸运的是，现在有大量的工具帮助我们简化这个过程：丰富的 Markup 语言简化了编写；强大的静态站点生成器简化了构建；友好的托管平台简化了发布。 这个博客的诞生也得益于这些工具： 编写：使用 Markdown，内置大量层级、列表、超链接、代码等的简便语法支持 构建：使用 Hexo，几条命令完成生成、预览、发布步骤 发布：使用 GitHub Pages 进行托管，方便又免费 接下来我会按以下顺序介绍如何基于这些工具完成整个博客的搭建过程： 环境准备 Hexo 和 NexT 主题的使用 GitHub Pages 的配置与部署 绑定自定义域名（可选） Hexo 的详细配置过程 环境准备 安装 Node.js 官网下载：https://nodejs.org/en/download/ 更换成国内镜像源： [edit ~/.npmrc]registry=https://registry.npm.taobao.org[end] 安装 Hexo npm install -g hexo-cli 常用 Hexo 命令 初始化目录：hexo init [folder] 新建文章：hexo new [layout] &lt;title&gt; 或 hexo n [layout] &lt;title&gt; 新建草稿：hexo new draft &lt;title&gt; 将草稿发布为正式文章：hexo publish &lt;title&gt; 生成静态文件：hexo generate 或 hexo g 监听文件变化：hexo g --watch 或 hexo g -w 部署：hexo deploy 或 hexo d 先生成后部署：hexo d -g 启动本地服务器（服务器会监听文件变化并自动更新）：hexo server 或 hexo s 启动调试：hexo s --debug 预览草稿：hexo s --draft 清除缓存：hexo clean 使用 NexT 主题下载主题cd &lt;your-hexo-site&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题编辑 _config.yml： theme: next 设置语言编辑 _config.yml： language: zh-Hans 查看是否生效hexo cleanhexo generatehexo server]]></content>
      <categories>
        <category>创世记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>blog</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
