<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F14%2Fset-map%2F</url>
    <content type="text"><![CDATA[Set 和 Map 数据结构Set基本用法ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成 Set 数据结构。 12345678const s = new Set();[2, 3, 5, 4, 5, 2, 2].forEach(x =&gt; s.add(x));for (let i of s) &#123; console.log(i);&#125;// 2 3 5 4 上面代码通过add()方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。 Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。 12345678910111213141516171819// 例一const set = new Set([1, 2, 3, 4, 4]);[...set]// [1, 2, 3, 4]// 例二const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);items.size // 5// 例三const set = new Set(document.querySelectorAll('div'));set.size // 56// 类似于const set = new Set();document .querySelectorAll('div') .forEach(div =&gt; set.add(div));set.size // 56 上面代码中，例一和例二都是Set函数接受数组作为参数，例三是接受类似数组的对象作为参数。 上面代码也展示了一种去除数组重复成员的方法。 12// 去除数组的重复成员[...new Set(array)] 上面的方法也可以用于，去除字符串里面的重复字符。 12[...new Set('ababbc')].join('')// "abc" 向 Set 加入值的时候，不会发生类型转换，所以5和&quot;5&quot;是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。 123456let set = new Set();let a = NaN;let b = NaN;set.add(a);set.add(b);set // Set &#123;NaN&#125; 上面代码向 Set 实例添加了两个NaN，但是只能加入一个。这表明，在 Set 内部，两个NaN是相等。 另外，两个对象总是不相等的。 1234567let set = new Set();set.add(&#123;&#125;);set.size // 1set.add(&#123;&#125;);set.size // 2 上面代码表示，由于两个空对象不相等，所以它们被视为两个值。 Set 实例的属性和方法Set 结构的实例有以下属性。 Set.prototype.constructor：构造函数，默认就是Set函数。 Set.prototype.size：返回Set实例的成员总数。 Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。 add(value)：添加某个值，返回 Set 结构本身。 delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。 has(value)：返回一个布尔值，表示该值是否为Set的成员。 clear()：清除所有成员，没有返回值。 上面这些属性和方法的实例如下。 1234567891011s.add(1).add(2).add(2);// 注意2被加入了两次s.size // 2s.has(1) // trues.has(2) // trues.has(3) // falses.delete(2);s.has(2) // false 下面是一个对比，看看在判断是否包括一个键上面，Object结构和Set结构的写法不同。 12345678910111213141516171819// 对象的写法const properties = &#123; 'width': 1, 'height': 1&#125;;if (properties[someName]) &#123; // do something&#125;// Set的写法const properties = new Set();properties.add('width');properties.add('height');if (properties.has(someName)) &#123; // do something&#125; Array.from方法可以将 Set 结构转为数组。 12const items = new Set([1, 2, 3, 4, 5]);const array = Array.from(items); 这就提供了去除数组重复成员的另一种方法。 12345function dedupe(array) &#123; return Array.from(new Set(array));&#125;dedupe([1, 1, 2, 3]) // [1, 2, 3] 遍历操作Set 结构的实例有四个遍历方法，可以用于遍历成员。 keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回键值对的遍历器 forEach()：使用回调函数遍历每个成员 需要特别指出的是，Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。 （1）keys()，values()，entries() keys方法、values方法、entries方法返回的都是遍历器对象（详见《Iterator 对象》一章）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。 12345678910111213141516171819202122let set = new Set(['red', 'green', 'blue']);for (let item of set.keys()) &#123; console.log(item);&#125;// red// green// bluefor (let item of set.values()) &#123; console.log(item);&#125;// red// green// bluefor (let item of set.entries()) &#123; console.log(item);&#125;// ["red", "red"]// ["green", "green"]// ["blue", "blue"] 上面代码中，entries方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。 Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的values方法。 12Set.prototype[Symbol.iterator] === Set.prototype.values// true 这意味着，可以省略values方法，直接用for...of循环遍历 Set。 12345678let set = new Set(['red', 'green', 'blue']);for (let x of set) &#123; console.log(x);&#125;// red// green// blue （2）forEach() Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。 12345let set = new Set([1, 4, 9]);set.forEach((value, key) =&gt; console.log(key + ' : ' + value))// 1 : 1// 4 : 4// 9 : 9 上面代码说明，forEach方法的参数就是一个处理函数。该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，Set 结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。 另外，forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。 （3）遍历的应用 扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构。 123let set = new Set(['red', 'green', 'blue']);let arr = [...set];// ['red', 'green', 'blue'] 扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。 123let arr = [3, 5, 2, 2, 5, 5];let unique = [...new Set(arr)];// [3, 5, 2] 而且，数组的map和filter方法也可以间接用于 Set 了。 1234567let set = new Set([1, 2, 3]);set = new Set([...set].map(x =&gt; x * 2));// 返回Set结构：&#123;2, 4, 6&#125;let set = new Set([1, 2, 3, 4, 5]);set = new Set([...set].filter(x =&gt; (x % 2) == 0));// 返回Set结构：&#123;2, 4&#125; 因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。 1234567891011121314let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 并集let union = new Set([...a, ...b]);// Set &#123;1, 2, 3, 4&#125;// 交集let intersect = new Set([...a].filter(x =&gt; b.has(x)));// set &#123;2, 3&#125;// 差集let difference = new Set([...a].filter(x =&gt; !b.has(x)));// Set &#123;1&#125; 如果想在遍历操作中，同步改变原来的 Set 结构，目前没有直接的方法，但有两种变通方法。一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。 123456789// 方法一let set = new Set([1, 2, 3]);set = new Set([...set].map(val =&gt; val * 2));// set的值是2, 4, 6// 方法二let set = new Set([1, 2, 3]);set = new Set(Array.from(set, val =&gt; val * 2));// set的值是2, 4, 6 上面代码提供了两种方法，直接在遍历操作中改变原来的 Set 结构。 WeakSet含义WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。 首先，WeakSet 的成员只能是对象，而不能是其他类型的值。 12345const ws = new WeakSet();ws.add(1)// TypeError: Invalid value used in weak setws.add(Symbol())// TypeError: invalid value used in weak set 上面代码试图向 WeakSet 添加一个数值和Symbol值，结果报错，因为 WeakSet 只能放置对象。 其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。 这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。 由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。 这些特点同样适用于本章后面要介绍的 WeakMap 结构。 语法WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构。 1const ws = new WeakSet(); 作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。 123const a = [[1, 2], [3, 4]];const ws = new WeakSet(a);// WeakSet &#123;[1, 2], [3, 4]&#125; 上面代码中，a是一个数组，它有两个成员，也都是数组。将a作为 WeakSet 构造函数的参数，a的成员会自动成为 WeakSet 的成员。 注意，是a数组的成员成为 WeakSet 的成员，而不是a数组本身。这意味着，数组的成员只能是对象。 123const b = [3, 4];const ws = new WeakSet(b);// Uncaught TypeError: Invalid value used in weak set(…) 上面代码中，数组b的成员不是对象，加入 WeaKSet 就会报错。 WeakSet 结构有以下三个方法。 WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。 WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。 WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。 下面是一个例子。 123456789101112const ws = new WeakSet();const obj = &#123;&#125;;const foo = &#123;&#125;;ws.add(window);ws.add(obj);ws.has(window); // truews.has(foo); // falsews.delete(window);ws.has(window); // false WeakSet 没有size属性，没有办法遍历它的成员。 12345ws.size // undefinedws.forEach // undefinedws.forEach(function(item)&#123; console.log('WeakSet has ' + item)&#125;)// TypeError: undefined is not a function 上面代码试图获取size和forEach属性，结果都不能成功。 WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。 下面是 WeakSet 的另一个例子。 1234567891011const foos = new WeakSet()class Foo &#123; constructor() &#123; foos.add(this) &#125; method () &#123; if (!foos.has(this)) &#123; throw new TypeError('Foo.prototype.method 只能在Foo的实例上调用！'); &#125; &#125;&#125; 上面代码保证了Foo的实例方法，只能在Foo的实例上调用。这里使用 WeakSet 的好处是，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存泄漏。 Map含义和基本用法JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。 12345const data = &#123;&#125;;const element = document.getElementById('myDiv');data[element] = 'metadata';data['[object HTMLDivElement]'] // "metadata" 上面代码原意是将一个 DOM 节点作为对象data的键，但是由于对象只接受字符串作为键名，所以element被自动转为字符串[object HTMLDivElement]。 为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。 123456789const m = new Map();const o = &#123;p: 'Hello World'&#125;;m.set(o, 'content')m.get(o) // "content"m.has(o) // truem.delete(o) // truem.has(o) // false 上面代码使用 Map 结构的set方法，将对象o当作m的一个键，然后又使用get方法读取这个键，接着使用delete方法删除了这个键。 上面的例子展示了如何向 Map 添加成员。作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。 12345678910const map = new Map([ ['name', '张三'], ['title', 'Author']]);map.size // 2map.has('name') // truemap.get('name') // "张三"map.has('title') // truemap.get('title') // "Author" 上面代码在新建 Map 实例时，就指定了两个键name和title。 Map构造函数接受数组作为参数，实际上执行的是下面的算法。 12345678910const items = [ ['name', '张三'], ['title', 'Author']];const map = new Map();items.forEach( ([key, value]) =&gt; map.set(key, value)); 事实上，不仅仅是数组，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构（详见《Iterator》一章）都可以当作Map构造函数的参数。这就是说，Set和Map都可以用来生成新的 Map。 12345678910const set = new Set([ ['foo', 1], ['bar', 2]]);const m1 = new Map(set);m1.get('foo') // 1const m2 = new Map([['baz', 3]]);const m3 = new Map(m2);m3.get('baz') // 3 上面代码中，我们分别使用 Set 对象和 Map 对象，当作Map构造函数的参数，结果都生成了新的 Map 对象。 如果对同一个键多次赋值，后面的值将覆盖前面的值。 1234567const map = new Map();map.set(1, 'aaa').set(1, 'bbb');map.get(1) // "bbb" 上面代码对键1连续赋值两次，后一次的值覆盖前一次的值。 如果读取一个未知的键，则返回undefined。 12new Map().get('asfddfsasadf')// undefined 注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。 1234const map = new Map();map.set(['a'], 555);map.get(['a']) // undefined 上面代码的set和get方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此get方法无法读取该键，返回undefined。 同理，同样的值的两个实例，在 Map 结构中被视为两个键。 1234567891011const map = new Map();const k1 = ['a'];const k2 = ['a'];map.set(k1, 111).set(k2, 222);map.get(k1) // 111map.get(k2) // 222 上面代码中，变量k1和k2的值是一样的，但是它们在 Map 结构中被视为两个键。 由上可知，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。 如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。 123456789101112131415let map = new Map();map.set(-0, 123);map.get(+0) // 123map.set(true, 1);map.set('true', 2);map.get(true) // 1map.set(undefined, 3);map.set(null, 4);map.get(undefined) // 3map.set(NaN, 123);map.get(NaN) // 123 实例的属性和操作方法Map 结构的实例有以下属性和操作方法。 （1）size 属性 size属性返回 Map 结构的成员总数。 12345const map = new Map();map.set('foo', true);map.set('bar', false);map.size // 2 （2）set(key, value) set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。 12345const m = new Map();m.set('edition', 6) // 键是字符串m.set(262, 'standard') // 键是数值m.set(undefined, 'nah') // 键是 undefined set方法返回的是当前的Map对象，因此可以采用链式写法。 1234let map = new Map() .set(1, 'a') .set(2, 'b') .set(3, 'c'); （3）get(key) get方法读取key对应的键值，如果找不到key，返回undefined。 123456const m = new Map();const hello = function() &#123;console.log('hello');&#125;;m.set(hello, 'Hello ES6!') // 键是函数m.get(hello) // Hello ES6! （4）has(key) has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。 12345678910const m = new Map();m.set('edition', 6);m.set(262, 'standard');m.set(undefined, 'nah');m.has('edition') // truem.has('years') // falsem.has(262) // truem.has(undefined) // true （5）delete(key) delete方法删除某个键，返回true。如果删除失败，返回false。 123456const m = new Map();m.set(undefined, 'nah');m.has(undefined) // truem.delete(undefined)m.has(undefined) // false （6）clear() clear方法清除所有成员，没有返回值。 1234567let map = new Map();map.set('foo', true);map.set('bar', false);map.size // 2map.clear()map.size // 0 遍历方法Map 结构原生提供三个遍历器生成函数和一个遍历方法。 keys()：返回键名的遍历器。 values()：返回键值的遍历器。 entries()：返回所有成员的遍历器。 forEach()：遍历 Map 的所有成员。 需要特别注意的是，Map 的遍历顺序就是插入顺序。 123456789101112131415161718192021222324252627282930313233343536const map = new Map([ ['F', 'no'], ['T', 'yes'],]);for (let key of map.keys()) &#123; console.log(key);&#125;// "F"// "T"for (let value of map.values()) &#123; console.log(value);&#125;// "no"// "yes"for (let item of map.entries()) &#123; console.log(item[0], item[1]);&#125;// "F" "no"// "T" "yes"// 或者for (let [key, value] of map.entries()) &#123; console.log(key, value);&#125;// "F" "no"// "T" "yes"// 等同于使用map.entries()for (let [key, value] of map) &#123; console.log(key, value);&#125;// "F" "no"// "T" "yes" 上面代码最后的那个例子，表示 Map 结构的默认遍历器接口（Symbol.iterator属性），就是entries方法。 12map[Symbol.iterator] === map.entries// true Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。 1234567891011121314151617const map = new Map([ [1, 'one'], [2, 'two'], [3, 'three'],]);[...map.keys()]// [1, 2, 3][...map.values()]// ['one', 'two', 'three'][...map.entries()]// [[1,'one'], [2, 'two'], [3, 'three']][...map]// [[1,'one'], [2, 'two'], [3, 'three']] 结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。 1234567891011121314const map0 = new Map() .set(1, 'a') .set(2, 'b') .set(3, 'c');const map1 = new Map( [...map0].filter(([k, v]) =&gt; k &lt; 3));// 产生 Map 结构 &#123;1 =&gt; 'a', 2 =&gt; 'b'&#125;const map2 = new Map( [...map0].map(([k, v]) =&gt; [k * 2, '_' + v]) );// 产生 Map 结构 &#123;2 =&gt; '_a', 4 =&gt; '_b', 6 =&gt; '_c'&#125; 此外，Map 还有一个forEach方法，与数组的forEach方法类似，也可以实现遍历。 123map.forEach(function(value, key, map) &#123; console.log("Key: %s, Value: %s", key, value);&#125;); forEach方法还可以接受第二个参数，用来绑定this。 123456789const reporter = &#123; report: function(key, value) &#123; console.log("Key: %s, Value: %s", key, value); &#125;&#125;;map.forEach(function(value, key, map) &#123; this.report(key, value);&#125;, reporter); 上面代码中，forEach方法的回调函数的this，就指向reporter。 与其他数据结构的互相转换（1）Map 转为数组 前面已经提过，Map 转为数组最方便的方法，就是使用扩展运算符（...）。 12345const myMap = new Map() .set(true, 7) .set(&#123;foo: 3&#125;, ['abc']);[...myMap]// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ 'abc' ] ] ] （2）数组 转为 Map 将数组传入 Map 构造函数，就可以转为 Map。 12345678new Map([ [true, 7], [&#123;foo: 3&#125;, ['abc']]])// Map &#123;// true =&gt; 7,// Object &#123;foo: 3&#125; =&gt; ['abc']// &#125; （3）Map 转为对象 如果所有 Map 的键都是字符串，它可以无损地转为对象。 12345678910111213function strMapToObj(strMap) &#123; let obj = Object.create(null); for (let [k,v] of strMap) &#123; obj[k] = v; &#125; return obj;&#125;const myMap = new Map() .set('yes', true) .set('no', false);strMapToObj(myMap)// &#123; yes: true, no: false &#125; 如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。 （4）对象转为 Map 12345678910function objToStrMap(obj) &#123; let strMap = new Map(); for (let k of Object.keys(obj)) &#123; strMap.set(k, obj[k]); &#125; return strMap;&#125;objToStrMap(&#123;yes: true, no: false&#125;)// Map &#123;"yes" =&gt; true, "no" =&gt; false&#125; （5）Map 转为 JSON Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。 1234567function strMapToJson(strMap) &#123; return JSON.stringify(strMapToObj(strMap));&#125;let myMap = new Map().set('yes', true).set('no', false);strMapToJson(myMap)// '&#123;"yes":true,"no":false&#125;' 另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。 1234567function mapToArrayJson(map) &#123; return JSON.stringify([...map]);&#125;let myMap = new Map().set(true, 7).set(&#123;foo: 3&#125;, ['abc']);mapToArrayJson(myMap)// '[[true,7],[&#123;"foo":3&#125;,["abc"]]]' （6）JSON 转为 Map JSON 转为 Map，正常情况下，所有键名都是字符串。 123456function jsonToStrMap(jsonStr) &#123; return objToStrMap(JSON.parse(jsonStr));&#125;jsonToStrMap('&#123;"yes": true, "no": false&#125;')// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125; 但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。 123456function jsonToMap(jsonStr) &#123; return new Map(JSON.parse(jsonStr));&#125;jsonToMap('[[true,7],[&#123;"foo":3&#125;,["abc"]]]')// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; ['abc']&#125; WeakMap含义WeakMap结构与Map结构类似，也是用于生成键值对的集合。 123456789101112// WeakMap 可以使用 set 方法添加成员const wm1 = new WeakMap();const key = &#123;foo: 1&#125;;wm1.set(key, 2);wm1.get(key) // 2// WeakMap 也可以接受一个数组，// 作为构造函数的参数const k1 = [1, 2, 3];const k2 = [4, 5, 6];const wm2 = new WeakMap([[k1, 'foo'], [k2, 'bar']]);wm2.get(k2) // "bar" WeakMap与Map的区别有两点。 首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。 1234567const map = new WeakMap();map.set(1, 2)// TypeError: 1 is not an object!map.set(Symbol(), 2)// TypeError: Invalid value used as weak map keymap.set(null, 2)// TypeError: Invalid value used as weak map key 上面代码中，如果将数值1和Symbol值作为 WeakMap 的键名，都会报错。 其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。 WeakMap的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。请看下面的例子。 123456const e1 = document.getElementById('foo');const e2 = document.getElementById('bar');const arr = [ [e1, 'foo 元素'], [e2, 'bar 元素'],]; 上面代码中，e1和e2是两个对象，我们通过arr数组对这两个对象添加一些文字说明。这就形成了arr对e1和e2的引用。 一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放e1和e2占用的内存。 1234// 不需要 e1 和 e2 的时候// 必须手动删除引用arr [0] = null;arr [1] = null; 上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。 WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。 基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用WeakMap结构。当该 DOM 元素被清除，其所对应的WeakMap记录就会自动被移除。 123456const wm = new WeakMap();const element = document.getElementById('example');wm.set(element, 'some information');wm.get(element) // "some information" 上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。 也就是说，上面的 DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。 总之，WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。 注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。 12345678const wm = new WeakMap();let key = &#123;&#125;;let obj = &#123;foo: 1&#125;;wm.set(key, obj);obj = null;wm.get(key)// Object &#123;foo: 1&#125; 上面代码中，键值obj是正常引用。所以，即使在 WeakMap 外部消除了obj的引用，WeakMap 内部的引用依然存在。 WeakMap 的语法WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。 123456const wm = new WeakMap();// size、forEach、clear 方法都不存在wm.size // undefinedwm.forEach // undefinedwm.clear // undefined WeakMap 的示例WeakMap 的例子很难演示，因为无法观察它里面的引用会自动消失。此时，其他引用都解除了，已经没有引用指向 WeakMap 的键名了，导致无法证实那个键名是不是存在。 贺师俊老师提示，如果引用所指向的值占用特别多的内存，就可以通过 Node 的process.memoryUsage方法看出来。根据这个思路，网友vtxf补充了下面的例子。 首先，打开 Node 命令行。 1$ node --expose-gc 上面代码中，--expose-gc参数表示允许手动执行垃圾回收机制。 然后，执行下面的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// 手动执行一次垃圾回收，保证获取的内存使用状态准确&gt; global.gc();undefined// 查看内存占用的初始状态，heapUsed 为 4M 左右&gt; process.memoryUsage();&#123; rss: 21106688, heapTotal: 7376896, heapUsed: 4153936, external: 9059 &#125;&gt; let wm = new WeakMap();undefined// 新建一个变量 key，指向一个 5*1024*1024 的数组&gt; let key = new Array(5 * 1024 * 1024);undefined// 设置 WeakMap 实例的键名，也指向 key 数组// 这时，key 数组实际被引用了两次，// 变量 key 引用一次，WeakMap 的键名引用了第二次// 但是，WeakMap 是弱引用，对于引擎来说，引用计数还是1&gt; wm.set(key, 1);WeakMap &#123;&#125;&gt; global.gc();undefined// 这时内存占用 heapUsed 增加到 45M 了&gt; process.memoryUsage();&#123; rss: 67538944, heapTotal: 7376896, heapUsed: 45782816, external: 8945 &#125;// 清除变量 key 对数组的引用，// 但没有手动清除 WeakMap 实例的键名对数组的引用&gt; key = null;null// 再次执行垃圾回收&gt; global.gc();undefined// 内存占用 heapUsed 变回 4M 左右，// 可以看到 WeakMap 的键名引用没有阻止 gc 对内存的回收&gt; process.memoryUsage();&#123; rss: 20639744, heapTotal: 8425472, heapUsed: 3979792, external: 8956 &#125; 上面代码中，只要外部的引用消失，WeakMap 内部的引用，就会自动被垃圾回收清除。由此可见，有了 WeakMap 的帮助，解决内存泄漏就会简单很多。 WeakMap 的用途前文说过，WeakMap 应用的典型场合就是 DOM 节点作为键名。下面是一个例子。 123456789let myElement = document.getElementById('logo');let myWeakmap = new WeakMap();myWeakmap.set(myElement, &#123;timesClicked: 0&#125;);myElement.addEventListener('click', function() &#123; let logoData = myWeakmap.get(myElement); logoData.timesClicked++;&#125;, false); 上面代码中，myElement是一个 DOM 节点，每当发生click事件，就更新一下状态。我们将这个状态作为键值放在 WeakMap 里，对应的键名就是myElement。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。 WeakMap 的另一个用处是部署私有属性。 123456789101112131415161718192021222324const _counter = new WeakMap();const _action = new WeakMap();class Countdown &#123; constructor(counter, action) &#123; _counter.set(this, counter); _action.set(this, action); &#125; dec() &#123; let counter = _counter.get(this); if (counter &lt; 1) return; counter--; _counter.set(this, counter); if (counter === 0) &#123; _action.get(this)(); &#125; &#125;&#125;const c = new Countdown(2, () =&gt; console.log('DONE'));c.dec()c.dec()// DONE 上面代码中，Countdown类的两个内部属性_counter和_action，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F12%2F28%2Fes6-proxy%2F</url>
    <content type="text"><![CDATA[es6 ProxyProxy 用于修改某些操作的默认行为,等同于在语言层面做了修改。Proxy在目标对象之前做了架设一层拦截, 外界访问该对象, 必须先通过这层拦截, 因此提供了一种机制, 可以对外界的访问进行过滤和改写。 Proxy支持的拦截一共有十三种:1.get12345678910111213141516var obj = &#123; name: &quot;get&quot;&#125;;var proxy = new Proxy(obj, &#123; get: function(target, key, receiver) &#123; if (key in target) &#123; return Reflect.get(target, key, receiver); &#125; else &#123; return null &#125; &#125;&#125;)console.log(proxy.name) //&apos;get&apos;console.log(proxy.age) //null 拦截对象属性的读取,比如proxy,foo 和proxy[‘foo’] 2.set12345678910111213141516171819var obj = &#123; name: &quot;&quot;&#125;;var proxy = new Proxy(obj, &#123; set: function(target, key, value, receiver) &#123; if (key in target) &#123; return Reflect.set(target, key, value, receiver); &#125; else &#123; console.error(`proxy对象 不存在$&#123;key&#125;属性, 写入失败`) return null &#125; &#125;&#125;)proxy.name = &apos;set&apos;console.log(proxy) //&#123;name: &apos;set&apos;&#125;proxy.title = &apos;set&apos; //proxy 对象不存在title属性,写入失败console.log(proxy) //&#123;name: &apos;set&apos;&#125; 拦截对象属性的设置, 比如proxy.foo = v或proxy[&#39;foo&#39;] = v返回一个值 3.apply123apply: function(target, object, args)&#123; &#125; 拦截Proxy实例作为函数调用的操作,比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...) 4.construct123construct: function(target, args)&#123; &#125; 拦截Proxy实例作为构造函数调用的操作,比如new proxy(...args) 5.has123has: function(target, key)&#123; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[react-dom 包]]></title>
    <url>%2F2018%2F12%2F07%2FReactDOM%2F</url>
    <content type="text"><![CDATA[概览 react-dom 这个软件包提供了针对DOM的方法,可以在你应用的顶级域中调用, 也可以在有需要的情况下用作跳出React模型的出口。你的大部分组件应该不需要这个包。 内置方法 render() unmountComponentAtNode() findDOMNode()]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[前端资料整理]]></title>
    <url>%2F2018%2F11%2F26%2Fresource%2F</url>
    <content type="text"><![CDATA[技术站 MDN web docs Vue vue技术站支持 常用UI组件库]]></content>
      <categories>
        <category>资料</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[react 学习资料整理]]></title>
    <url>%2F2018%2F11%2F21%2Freact%2F</url>
    <content type="text"><![CDATA[react 文档 中国社区中文文档官网]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mobile Debug]]></title>
    <url>%2F2018%2F11%2F20%2Fmobiledebug%2F</url>
    <content type="text"><![CDATA[移动端调试 网络代理 网页调试 请求挟持 HTTPS 跨平台 Hosts管理 WebSocket 数据抓捕 官网]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vue-cli项目搭建]]></title>
    <url>%2F2018%2F11%2F12%2Fvue%2F</url>
    <content type="text"><![CDATA[vue中文官网 https://cn.vuejs.org/ 谷歌调试工具:dev-tools1.github下载地址：https://github.com/vuejs/vue-devtools2.下载好后进入vue-devtools-master工程 执行npm install —–&gt;npm run build.3.然后打开shells&gt;chrome&gt;src&gt;manifest.json 把里面的”persistent”: false改为true4.打开谷歌浏览器设置—&gt;扩展程序–》勾选开发者模式—》添加工程中的shells–&gt;chrome的内容，至此恭喜已经安装成功！！！5.打开自己的vue项目中，如果是有vue-cli构建的项目，执行npm run dev,打开http://localhost:8080/ 服务器调试地址；至此完成devtools的安装； 利用vue-cli来初始化我们的项目1234567891011121314151617//全局安装webpacknpm install -g webpack//安装vue-clinpm install -g vue-cli//使用vue-cli初始化项目,初始化项目时根据需要选择需要用到的框架(router,vuex),是否需要Eslint验证，选否vue init webpack my-project//进入到目录cd my-project//安装依赖npm install//运行npm run dev vue-cli#2.0 webpack 配置分析12345678910111213141516171819202122232425262728|-- build // 项目构建(webpack)相关代码| |-- build.js // 生产环境构建代码| |-- check-version.js // 检查node、npm等版本| |-- dev-client.js // 热重载相关| |-- dev-server.js // 构建本地服务器| |-- utils.js // 构建工具相关| |-- webpack.base.conf.js // webpack基础配置| |-- webpack.dev.conf.js // webpack开发环境配置| |-- webpack.prod.conf.js // webpack生产环境配置|-- config // 项目开发环境配置| |-- dev.env.js // 开发环境变量| |-- index.js // 项目一些配置变量| |-- prod.env.js // 生产环境变量| |-- test.env.js // 测试环境变量|-- src // 源码目录| |-- components // vue公共组件| |-- store // vuex的状态管理| |-- App.vue // 页面入口文件| |-- main.js // 程序入口文件，加载各种公共组件|-- static // 静态文件，比如一些图片，json数据等| |-- data // 群聊分析得到的数据用于数据可视化|-- .babelrc // ES6语法编译配置|-- .editorconfig // 定义代码格式|-- .gitignore // git上传需要忽略的文件格式|-- README.md // 项目说明|-- favicon.ico |-- index.html // 入口页面|-- package.json // 项目基本信息 插件日历插件vue-event-calendergithub中文文档:https://github.com/GeoffZhu/vue-event-calendar/blob/master/README.zh.md演示地址:http://geoffzhu.cn/vue-event-calendar/]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Travis 自动部署博客到 Github Pages]]></title>
    <url>%2F2017%2F08%2F12%2Ftravis%2F</url>
    <content type="text"><![CDATA[简介 由于博客的源码和生成站点位于不同的代码仓库中（源码位于 uchuhimo/uchuhimo.me，生成的静态站点位于 uchuhimo/uchuhimo.github.io，即个人 GitHub Pages 的仓库），文章的发布过程需要提交两次。作为拥有懒惰这种美德的程序员，自然会开始折腾只需要提交一次、博客就自动部署到 GitHub Pages 上的方法——这里就轮到 Travis 登场了。 接下来，我会先介绍自动部署的原理，再讲解搭建的过程。 原理Travis 为 GitHub 上的开源项目提供免费的持续集成（CI）服务，只要你向指定仓库提交了代码，Travis 就会根据配置自动运行 CI 任务。利用这个特性，我们可以做到在一次提交过程中触发如下流程： 内容编辑完成，向博客的源码仓库 push 代码 GitHub 通过 hook 告诉 Travis 有新的提交，Travis 启动新的 CI 任务 在 CI 任务中，代码被 clone 到 Travis 的构建服务器上 构建服务器准备好 Node.js 的运行环境，运行 Hexo 的生成命令，并将生成的静态站点 push 到 GitHub Pages 的仓库中，博客部署完成 这个过程中的难点在于如何给予 Travis push 你的 GitHub Pages 仓库的权限。有两种方法可以获得 push 权限： SSH 私钥：只要在 GitHub 上配了相应公钥，就可以通过 SSH 进行 push Personal access token：只要在 GitHub 上生成了 personal access token，就可以通过 HTTPS 进行 push 但是，无论是使用上述的哪种方法，SSH 私钥 / personal access token 都不能出现在 Travis 的配置文件里，因为 Travis 的配置文件（即 .travis.yml）会出现在博客的源码仓库里，这意味着任何能访问你提交历史的路人（对于 GitHub 的公开项目来说，意味着任何人）都能获取到它们并用来向你的仓库进行任意提交——这是灾难性的（顺带一提，GitHub 如果发现你的代码仓库中含有 personal access token，会自动删除相应token，因此向仓库提交 personal access token 的行为并不会带来风险，只是没有意义而已，因为 token 会直接失效）。因此，我们需要使用 Travis 客户端对 SSH 私钥 / personal access token 进行加密，然后在 CI 任务中解密并使用它们。 原理解释先到这里，下面我们直接动手做吧~ 准备工作 注册 Travis 并将 Github Pages 的源码项目加入 Travis 准备一个 Github 的 personal access token 安装 Travis 客户端（加入了惯例的“换国内源”环节，不用谢我^_^）： 123456789101112131415# install rvmgpg --keyserver hkp://keys.gnupg.net:80 --recv-keys D39DC0E3\curl -sSL https://get.rvm.io | bash -s stablesource /home/uchuhimo/.rvm/scripts/rvmecho "ruby_url=https://cache.ruby-china.org/pub/ruby" &gt; ~/.rvm/user/db# install rubyrvm install 2.4.0rvm use 2.4.0 --default# configure gemgem sources --add https://gems.ruby-china.org/ --remove http://rubygems.org/# install travisgem install travis 配置 Travis 在博客的源码项目下新建 .travis.yml：touch .travis.yml 加密上文生成的 personal access token：travis encrypt GITHUB_TOKEN=&quot;&lt;personal-access-token&gt;&quot; --add 在 .travis.yml 中添加如下内容（记得替换变量）： 12345678910111213141516171819language: node_jsnode_js: - "7"before_deploy: - hexo generate # generate static sitedeploy: provider: pages # deploy to GitHub Pages skip_cleanup: true # don't clean generated site github_token: $GITHUB_TOKEN # provide the encrypted token on: branch: master repo: &lt;username&gt;/&lt;github-pages-repo-name&gt; # optional, defaults to current repo local_dir: public # optional, defaults to the current directory target_branch: master # optional, defaults to "gh-pages" fqdn: &lt;custom-domain-url&gt; # optional project_name: &lt;project-name&gt; # optional, defaults to value of fqdn or repo email: &lt;committer-email&gt; # optional, defaults to "deploy@travis-ci.org" name: &lt;committer-name&gt; # optional, defaults to "Deployment Bot" 提交更改即可触发 Travis 自动更新 Github Pages 到 https://travis-ci.org/&lt;username&gt;/&lt;blog-source-repo-name&gt; 页面查看构建是否成功 后记在最终采用上述方案之前，我也看了网上现有的方案，感觉都多多少少有些繁琐，因此在自己折腾出来后才决定分享出来，供大家参考。 下面是我看到的几个比较靠谱的方案，以供对比： 基于 SSH 的方案：用 Travis CI 自動部署網站到 GitHub 这是 Hexo 作者 tommy351 自己部署 Hexo 的官方网站用的方案，感觉看完都有点不想折腾了，真的很繁琐。 基于 personal access token 的方案：使用 Travis CI 自动更新 GitHub Pages 这是 NexT 作者 iissnan 部署 NexT 文档的方案，使用的和我一样是 personal access token，iissnan 自己撸了提交到 GitHub Pages 的命令，而我直接使用了 Travis 提供的部署插件，会更简单和易维护一些（其实真正的原因是我懒）。另一点不同是 iissnan 使用了 gulp 管理构建过程，而我直接使用 Hexo 的命令进行构建，因此构建的命令会有所不同。 参考链接 GitHub Pages Deployment - Travis CI]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>Travis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用 Hexo 和 GitHub Pages 搭建这个博客]]></title>
    <url>%2F2017%2F04%2F11%2Fhexo%2F</url>
    <content type="text"><![CDATA[一个博客的搭建过程分为三步： 编写：包含内容的书写与格式的配置 构建：从编写的原始内容生成可发布的最终内容 发布：让待发布的内容对读者可见 依托于博客平台（如博客园、新浪博客等）发布内容的用户只需要关注编写部分，但要搭建一个独立的个人博客则以上三方面都需要关心。幸运的是，现在有大量的工具帮助我们简化这个过程：丰富的 Markup 语言简化了编写；强大的静态站点生成器简化了构建；友好的托管平台简化了发布。 这个博客的诞生也得益于这些工具： 编写：使用 Markdown，内置大量层级、列表、超链接、代码等的简便语法支持 构建：使用 Hexo，几条命令完成生成、预览、发布步骤 发布：使用 GitHub Pages 进行托管，方便又免费 接下来我会按以下顺序介绍如何基于这些工具完成整个博客的搭建过程： 环境准备 Hexo 和 NexT 主题的使用 GitHub Pages 的配置与部署 绑定自定义域名（可选） Hexo 的详细配置过程 环境准备 安装 Node.js 官网下载：https://nodejs.org/en/download/ 更换成国内镜像源： 123[edit ~/.npmrc]registry=https://registry.npm.taobao.org[end] 安装 Hexo 1npm install -g hexo-cli 常用 Hexo 命令 初始化目录：hexo init [folder] 新建文章：hexo new [layout] &lt;title&gt; 或 hexo n [layout] &lt;title&gt; 新建草稿：hexo new draft &lt;title&gt; 将草稿发布为正式文章：hexo publish &lt;title&gt; 生成静态文件：hexo generate 或 hexo g 监听文件变化：hexo g --watch 或 hexo g -w 部署：hexo deploy 或 hexo d 先生成后部署：hexo d -g 启动本地服务器（服务器会监听文件变化并自动更新）：hexo server 或 hexo s 启动调试：hexo s --debug 预览草稿：hexo s --draft 清除缓存：hexo clean 使用 NexT 主题下载主题12cd &lt;your-hexo-site&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题编辑 _config.yml： 1theme: next 设置语言编辑 _config.yml： 1language: zh-Hans 查看是否生效123hexo cleanhexo generatehexo server 创建 GitHub Pages在自己的 GitHub 账号下创建名为 &lt;username&gt;.github.io 的项目即可。 部署博客到 GitHub Pages设置 ssh 访问 GitHub 仓库 生成 ssh key ：ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; 在 GitHub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 添加 ~/.ssh/id_rsa.pub 中的内容 安装 git-deploy 插件1npm install hexo-deployer-git --save 配置 git-deploy 插件编辑 _config.yml： 1234deploy: type: git repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git branch: master 部署1hexo d -g 绑定自定义域名 在万网申请域名：https://wanwang.aliyun.com/ 其他可供选择的域名服务商： GoDaddy：世界上最大的域名注册商，但续费比较贵 freenom：可以找到免费的域名，但都是很奇怪的后缀，比如.ml（感觉做机器学习的初创公司可以弄来玩玩，反正不要钱wwww） 不同域名服务商的详细对比（主要是价格）：Domain Name Price and Availability 注册 DNSPOD：https://www.dnspod.cn 在 DNSPOD 的控制台选择：域名解析 -&gt; 全部域名 -&gt; 添加域名，将在万网申请到的域名填入 在万网的域名控制台的相应域名依次选择：管理 -&gt; 基本信息 -&gt; 修改 DNS，将 DNS 修改为 DNSPOD 的 DNS：f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net 在 DNSPOD 的控制台选择相应域名并添加记录，主机记录使用 “@”，记录类型选择 “CNAME”，记录值使用 “&lt;username&gt;.github.io“，保存 在 Hexo 中绑定域名： 123[create/edit source/CNAME]&lt;your-domain-name&gt;[end] 重新部署，并等待 DNS 生效 如果需要绑定多个域名，可以将 GitHub Pages 绑定到其中一个域名，并把其他域名重定向到该域名。在 DNSPOD 中，这可以通过在需要重定向的域名中添加类型为”显性URL”的记录实现。具体请参考”隐/显性转发“和”DNSPod 支持域名301重定向吗？“。 配置 Hexo设置头像编辑 _config.yml： 1avatar: &lt;avatar-url&gt; 添加标签页面 新建页面： 1hexo new page tags 设置页面（编辑 source/tags/index.md）： 1234---type: "tags"comments: false--- 修改菜单（编辑 themes/next/_config.yml）： 12menu: tags: /tags 添加分类页面 新建页面： 1hexo new page categories 设置页面（编辑 source/categories/index.md）： 1234---type: "categories"comments: false--- 修改菜单（编辑 themes/next/_config.yml）： 12menu: tags: /categories 添加 about 页面 新建页面： 1hexo new page about 设置页面（编辑 source/about/index.md） 修改菜单（编辑 themes/next/_config.yml）： 12menu: about: /about 首页文章显示摘要在文章中适当位置插入 &lt;!--more--&gt;，该位置之前的部分即为摘要，会显示在首页中。 显示文章更新时间编辑 themes/next/_config.yml： 123# Post meta display settingspost_meta: updated_at: true 文章更新时间默认使用文件的修改时间，如果想自己指定，可以在文章的 Front-matter （即文件最上方以 --- 分隔的区域）中加入： 1updated: &lt;update-time&gt; 其中，&lt;update-time&gt; 的格式示例为 2017-04-11 16:29:50。 设置代码高亮编辑 themes/next/_config.yml： 1234# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal 添加 Creative Commons 署名协议编辑 themes/next/_config.yml： 12345678910# Declare license on posts# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: bypost_copyright: enable: true license: CC BY 4.0 license_url: http://creativecommons.org/licenses/by/4.0/ 添加评论系统使用 Disqus 作为评论系统。需要注意的是，Disqus 已经被墙，所以不翻墙是看不到的，只能相信大家都是带着梯子来的了。。。 编辑 themes/next/_config.yml： 12345# Disqusdisqus: enable: true shortname: &lt;your-shortname&gt; count: true 也可以使用来必力代替 Disqus，编辑 themes/next/_config.yml： 1livere_uid: &lt;your-uid&gt; 侧边栏社交链接编辑 themes/next/_config.yml： 123456789101112131415# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name 微博: http://weibo.com/your-user-name 豆瓣: http://douban.com/people/your-user-name 知乎: http://www.zhihu.com/people/your-user-name# Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter 微博: weibo 开启打赏功能编辑 themes/next/_config.yml： 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image 腾讯公益404页面编辑 source/404.html： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 站点建立时间编辑 themes/next/_config.yml： 1since: 2017 阅读次数统计使用不蒜子统计，编辑 themes/next/_config.yml： 1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt; page_pv_footer: 集成搜索服务使用本地搜索，按以下步骤配置： 安装 hexo-generator-searchdb 插件： 1npm install hexo-generator-searchdb --save 编辑 _config.yml： 12345search: path: search.xml field: post format: html limit: 10000 编辑 themes/next/_config.yml： 123# Local searchlocal_search: enable: true 本地搜索的一个替代方案是 Algolia，按以下步骤配置： 前往 Algolia 注册页面注册一个新账户。注册后的 14 天内拥有所有功能（包括收费类别的），之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可操作数。注册完成后，创建一个新的 Index。 安装 hexo-algolia 插件（默认使用的 0.1.1 版本会出现问题，必须指定 0.2.0 版本）： 1npm install --save hexo-algolia@0.2.0 在 Algolia 网站上找到需要使用的配置值，包括 ApplicationID、Search API Key、Admin API Key。 编辑 _config.yml： 12345algolia: applicationID: &lt;application-id&gt; apiKey: &lt;search-api-key&gt; indexName: &lt;index-name&gt; chunkSize: 5000 由于 Admin API Key 需要保密保存，我们在一个单独的文件 _config.private.yml 中配置它： 12algolia: adminApiKey: &lt;admin-api-key&gt; 如果使用了 Git 进行源码管理的话，在 .gitignore 中忽略 _config.private.yml 和 _multiconfig.yml （这是在更新 Index 过程中合并 _config.yml 和 _config.private.yml 的内容生成的文件，里面也包含 Admin API Key），防止 Admin API Key 被公开到 GitHub 等托管网站上。 执行以下命令更新 Index： 1hexo algolia --config _config.yml,_config.private.yml 需要注意的是，在 3.3.1 版本的 Hexo 中，该命令会出现下列报错信息： 1221:15:11.652 ERROR Local hexo not found in C:\projects\archive\xxx11:15:11.654 ERROR Try running: &apos;npm install hexo --save&apos; 这是 Hexo 的 bug，具体请参考： ERROR when trying to use two alternative configs · Issue #2518 · hexojs/hexo Fix multiple config issue #2518 by NoahDragon · Pull Request #2520 · hexojs/hexo 该 bug 已在该 commit 中修复：Fix multiple config issue #2518 (#2520) · hexojs/hexo@fbdee90，并在 3.3.5 版本中 release。 编辑 themes/next/_config.yml： 123456789# Algolia Searchalgolia_search: enable: true hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms" 添加 sitemap 插件安装 hexo-generator-sitemap 插件： 1npm install hexo-generator-sitemap --save 配置（编辑 _config.yml）： 12sitemap: path: sitemap.xml 添加蜘蛛协议 robots.txt新建 source/robots.txt： 12345678910111213141516User-agent: *Disallow: /CNAMEDisallow: /READMEAllow: /Allow: /about/Allow: /archives/Allow: /categories/Allow: /tags/Allow: /css/Allow: /images/Allow: /js/Allow: /lib/Sitemap: &lt;your-domain-name&gt;/sitemap.xml 设置 RSS安装 hexo-generator-feed 插件： 1npm install hexo-generator-feed --save 配置（编辑 _config.yml）： 123456feed: type: atom path: atom.xml limit: 20 # Maximum number of posts in the feed (Use 0 or false to show all posts) hub: content: 添加脚注/上标/下标/缩写支持由于 Hexo 默认使用的 Markdown renderer 是 [marked]，它不支持脚注/上标/下标/缩写，我们可以使用 [Markdown-it] 替代 marked： 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 配置（编辑 _config.yml）： 12345678910111213141516171819202122# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: false linkify: true typographer: false quotes: '“”‘’' plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup anchors: level: 2 collisionSuffix: 'v' permalink: false permalinkClass: header-anchor permalinkSymbol: 参考链接 hexo你的博客 | 不如 手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记 Documentation | Hexo NexT 使用文档 如何使用Hexo寫草稿? | 點燈坊 marked Markdown-it]]></content>
      <categories>
        <category>构建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
